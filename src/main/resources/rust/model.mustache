{{>partial_header}}
{{#models}}
{{#model}}
#![allow(unused_imports)]
{{#description}}
/// {{{classname}}} : {{{description}}}
{{/description}}

use serde_json::Value;
{{! #isUseDecimal}}
use rust_decimal::Decimal;
{{! /isUseDecimal}}
use chrono::{NaiveDateTime, NaiveDate, DateTime, FixedOffset, Utc};

use crate::OutlinePrint;
use crate::models::*;
use crate::date_serializer;
use crate::date_serializer_opt;
use crate::serialize_quoted_numbers;
use crate::serialize_quoted_numbers_opt;
//Uncomment this to deal with limited rfc support on server side
//use crate::datetime_serializer::*;

{{#hasVars}}
#[derive(Debug, Serialize, Deserialize, PartialEq, Clone)]
pub struct {{classname}} {
{{#vars}}
  {{#dataFormat}}
  {{#example}}
  {{/example}}
  {{/dataFormat}}
  #[serde(rename = "{{{baseName}}}")]
  {{^required}}
  #[serde(default)]
  {{/required}}
  {{#isString}}
      {{#isNumeric}}
  #[serde(with = "serialize_quoted_numbers{{^required}}_opt{{/required}}")]
      {{/isNumeric}}
  {{/isString}}
  {{#isDate}}
  //#[serde(with = "date_serializer{{^required}}_opt{{/required}}")]
  {{/isDate}}
  {{#isDateTime}}
  //Uncomment this also to deal with limited rfc support on server side
  //#[serde(serialize_with = "serialize_dt", deserialize_with = "deserialize_dt")]
  {{/isDateTime}}
  {{#description}}///{{{description}}}{{/description}}
  {{name}}: {{^required}}Option<{{/required}}{{{datatype}}}{{^required}}>{{/required}}{{#hasMore}},{{/hasMore}} {{#example}} // {{{example}}} {{/example}}
{{/vars}}
}

impl {{classname}} {
  pub fn new({{#requiredVars}}{{name}}: {{{datatype}}}, {{/requiredVars}}) -> {{classname}} {
    {{classname}} {
      {{#vars}}
      {{name}}: {{#required}}{{name}}{{/required}}{{^required}}{{#isListContainer}}None{{/isListContainer}}{{#isMapContainer}}None{{/isMapContainer}}{{^isContainer}}None{{/isContainer}}{{/required}}{{#hasMore}},{{/hasMore}}
      {{/vars}}
    }
  }

  {{#vars}}
  pub fn set_{{name}}(&mut self, {{name}}: {{{datatype}}}) {
    self.{{name}} = {{^required}}Some({{name}}){{/required}}{{#required}}{{name}}{{/required}};
  }

  pub fn with_{{name}}(mut self, {{name}}: {{{datatype}}}) -> {{classname}} {
    self.{{name}} = {{^required}}Some({{name}}){{/required}}{{#required}}{{name}}{{/required}};
    self
  }
  {{#description}}///{{{description}}}{{/description}}
  pub fn {{name}}(&self) -> {{^required}}Option<{{/required}}&{{{datatype}}}{{^required}}>{{/required}} {
    {{#required}}&{{/required}}self.{{name}}{{^required}}.as_ref(){{/required}}
  }

  {{^required}}
  pub fn reset_{{name}}(&mut self) {
    self.{{name}} = None;
  }
  {{/required}}

  {{/vars}}

  pub fn validate(&self) {
{{#vars}}
    {{#minimum}}
    let min_value = {{{datatype}}}::from({{minimum}});
    {{^required}}
    if let Some({{name}}) = self.{{name}} {
      assert!({{name}}>=min_value, "{{classname}}.{{name}} should be >= {{minimum}}");
    }
    {{/required}}
    {{#required}}
    assert!(self.{{name}}>=min_value, "{{classname}}.{{name}} should be >= {{minimum}}");
    {{/required}}
    {{/minimum}}
    {{#maximum}}
    let max_value = {{{datatype}}}::from({{maximum}});
    {{^required}}
    if let Some({{name}}) = self.{{name}} {
      assert!({{name}}<=max_value, "{{classname}}.{{name}} should be <= {{maximum}}");
    }
    {{/required}}
    {{#required}}
    assert!(self.{{name}}<=max_value, "{{classname}}.{{name}} should be <= {{maximum}}");
    {{/required}}
    {{/maximum}}
{{/vars}}
  }

}
{{/hasVars}}
{{#isEnum}}
#[derive(Debug, Serialize, Deserialize, Copy, Clone, PartialEq, Eq, Hash)]
pub enum {{name}} {
  {{#allowableValues}}
  {{#enumVars}}
  #[serde(rename(serialize = "{{{value}}}"))]
  #[serde(alias = "{{{value}}}")]
  {{name}},
  {{/enumVars}}
  {{/allowableValues}}
}
/*
impl ToString for {{name}} {
  fn to_string(&self) -> String {
      serde_json::to_value(self).unwrap().as_str().unwrap().to_string()
  }
}
*/
impl std::fmt::Display for {{name}} {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let formatted = serde_json::to_value(self).unwrap().as_str().unwrap().to_string();
        write!(f, "{:?}", formatted)
    }
}
impl<'a> OutlinePrint<'a> for {{name}} {
    fn outline_print(&'a self) -> String {
        serde_json::to_value(self).unwrap().as_str().unwrap().to_string()
    }
}
{{/isEnum}}

{{#isAlias}}

//{{name}} is an alias
#[derive(Clone, Debug, PartialOrd, Ord, Serialize, Deserialize, PartialEq, Eq, Hash, Default)]
#[repr(transparent)]
#[serde(transparent)]
pub struct {{name}}({{{dataType}}});

impl crate::fmt::Display for {{name}} {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.0)
    }
}
impl From<{{{dataType}}}> for {{name}} {
    fn from(v: {{{dataType}}}) -> Self {
        Self(v)
    }
}
impl<'a> crate::OutlinePrint<'a> for {{name}} {
    fn outline_print(&'a self) -> String {
        format!("{:?}", self)
    }
}
{{/isAlias}}

{{#isContainer}}

pub type {{name}} = Vec<{{{arrayModelType}}}>;

{{/isContainer}}
{{/model}}
{{/models}}
