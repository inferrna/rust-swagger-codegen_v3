{{>partial_header}}
#![allow(unused_imports)]
use std::sync::Arc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use serde_json::Value;
use tokio::runtime::Runtime;
use futures;
use futures::{Future, Stream};
use hyper::Body;
use hyper::body::Bytes;
use hyper::body::HttpBody;
use std::str::FromStr;
use chrono::{NaiveDate, NaiveDateTime, DateTime, FixedOffset, Utc, SecondsFormat};
use crate::{OutlinePrint};
use crate::models::*;
use super::{Error, configuration};
use headers::{Authorization, Header};
use headers::authorization::Credentials;
use crate::ToUriParam;
{{! #isUseDecimal}}
use rust_decimal::Decimal;
{{! /isUseDecimal}}

pub struct {{{classname}}}Client<C: hyper::client::connect::Connect + Clone + Send + Sync> {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static> {{{classname}}}Client<C> {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> {{{classname}}}Client<C> {
        {{{classname}}}Client {
            configuration: configuration,
        }
    }
}

#[async_trait::async_trait]
pub trait {{classname}} {
{{#operations}}
{{#operation}}
///
/// {{summary}}
///
/// {{notes}}
///
/// # Arguments
///
{{#allParams}}
    /// * `{{paramName}}` {{this.description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
    /// {{#example}}Example: {{{example}}}{{/example}}
    /// {{this.notes}}
    ///
{{/allParams}}
    async fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{^required}}Option<{{/required}}{{#isString}}&str{{/isString}}{{#isUuid}}&str{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}crate::models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{^required}}>{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Result<{{^returnType}}(){{/returnType}}{{#returnType}}{{{returnType}}}{{/returnType}}, Error<serde_json::Value>>;
{{/operation}}
{{/operations}}
}

#[async_trait::async_trait]
impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static>{{classname}} for {{classname}}Client<C> {
{{#operations}}
{{#operation}}
    async fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{^required}}Option<{{/required}}{{#isString}}&str{{/isString}}{{#isUuid}}&str{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}crate::models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{^required}}>{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Result<{{^returnType}}(){{/returnType}}{{#returnType}}{{{returnType}}}{{/returnType}}, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

{{#hasAuthMethods}}
        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
{{#authMethods}}
{{#isApiKey}}
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
        {{#isKeyInHeader}}
            auth_headers.insert("{{keyParamName}}".to_owned(), val);
        {{/isKeyInHeader}}
        {{#isKeyInQuery}}
            auth_query.insert("{{keyParamName}}".to_owned(), val);
        {{/isKeyInQuery}}
        };
{{/isApiKey}}
{{#isBasic}}
        if let Some(ref auth_conf) = configuration.basic_auth {
            let pass = auth_conf.1.as_ref().map(|p| format!(":{}", p)).unwrap_or("".to_string());
            let basic_unencoded = format!("{}{}", &auth_conf.0, pass);
            let basic_encoded = base64::encode(basic_unencoded.as_bytes());
            let basic_full = format!("Basic {}", basic_encoded);
            auth_headers.insert("Authorization".to_owned(), basic_full.to_string());
        };
{{/isBasic}}
{{#isOAuth}}
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
{{/isOAuth}}
{{#isBearer}}
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
{{/isBearer}}
{{/authMethods}}
{{/hasAuthMethods}}
        let method = hyper::Method::{{httpMethod}};

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = {{#hasQueryParams}}true{{/hasQueryParams}}{{^hasQueryParams}}false{{/hasQueryParams}};
{{#queryParams}}
    {{^required}}
        if let Some({{paramName}}) = {{paramName}} {
    {{/required}}
        {{#isPrimitiveType}}
            api_query.append_pair("{{baseName}}", &{{paramName}}.outline_print() );
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
          {{#isListContainer}}
            for p in {{paramName}}.iter() {
                api_query.append_pair("{{baseName}}", &p.outline_print());
            }
          {{/isListContainer}}
          {{^isListContainer}}
            api_query.append_pair("{{baseName}}", &{{paramName}}.outline_print());
          {{/isListContainer}}
        {{/isPrimitiveType}}
    {{^required}}
        }
    {{/required}}
{{/queryParams}}
{{#hasAuthMethods}}
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
{{/hasAuthMethods}}
            if has_query_params{{#hasAuthMethods}} || auth_query.len()>0 {{/hasAuthMethods}} {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/{{{path}}}{}", configuration.base_path, query_string{{#pathParams}}, {{baseName}}={{paramName}}{{#isString}}.to_uri_param(){{/isString}}{{^isString}}.outline_print(){{/isString}}{{#isListContainer}}.join(",").as_ref().to_uri_param(){{/isListContainer}}{{/pathParams}});

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }

        {{#hasHeaderParams}}
        {
            {{#headerParams}}
            headers.insert("{{baseName}}", {{paramName}}{{#isListContainer}}.join(",").as_ref(){{/isListContainer}}.parse().unwrap());
            {{/headerParams}}
        }
        {{/hasHeaderParams}}

        {{#hasAuthMethods}}
        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }
        {{/hasAuthMethods}}

        let somebody = Body::empty();
        {{#hasBodyParam}}
        {{#bodyParams}}
        let serialized = serde_json::to_string(&{{paramName}}).unwrap();
        //Pretty print request body if needed for some dbg reasons
        //let value_result: serde_json::Value = serde_json::from_str(&serialized).unwrap();
        //eprintln!("\n{}\n", serde_json::to_string_pretty(&value_result).unwrap());
        headers.insert(hyper::header::CONTENT_TYPE, "application/json".parse().unwrap());
        headers.insert(hyper::header::CONTENT_LENGTH, format!("{}", serialized.len()).parse().unwrap());
        let somebody = Body::from(serialized);
        {{/bodyParams}}
        {{/hasBodyParam}}

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        {{^returnType}}
        Result::ok(()))
        {{/returnType}}
        {{#returnType}}
        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
        {{/returnType}}
    }

{{/operation}}
{{/operations}}
}
